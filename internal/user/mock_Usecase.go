// Code generated by mockery v2.43.2. DO NOT EDIT.

package user

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockUsecase is an autogenerated mock type for the Usecase type
type MockUsecase struct {
	mock.Mock
}

type MockUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUsecase) EXPECT() *MockUsecase_Expecter {
	return &MockUsecase_Expecter{mock: &_m.Mock}
}

// DeleteOne provides a mock function with given fields: ctx, userId
func (_m *MockUsecase) DeleteOne(ctx context.Context, userId int64) error {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOne")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUsecase_DeleteOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOne'
type MockUsecase_DeleteOne_Call struct {
	*mock.Call
}

// DeleteOne is a helper method to define mock.On call
//   - ctx context.Context
//   - userId int64
func (_e *MockUsecase_Expecter) DeleteOne(ctx interface{}, userId interface{}) *MockUsecase_DeleteOne_Call {
	return &MockUsecase_DeleteOne_Call{Call: _e.mock.On("DeleteOne", ctx, userId)}
}

func (_c *MockUsecase_DeleteOne_Call) Run(run func(ctx context.Context, userId int64)) *MockUsecase_DeleteOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockUsecase_DeleteOne_Call) Return(_a0 error) *MockUsecase_DeleteOne_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUsecase_DeleteOne_Call) RunAndReturn(run func(context.Context, int64) error) *MockUsecase_DeleteOne_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields: ctx
func (_m *MockUsecase) GetAll(ctx context.Context) ([]*User, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []*User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*User, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsecase_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockUsecase_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUsecase_Expecter) GetAll(ctx interface{}) *MockUsecase_GetAll_Call {
	return &MockUsecase_GetAll_Call{Call: _e.mock.On("GetAll", ctx)}
}

func (_c *MockUsecase_GetAll_Call) Run(run func(ctx context.Context)) *MockUsecase_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUsecase_GetAll_Call) Return(_a0 []*User, _a1 error) *MockUsecase_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsecase_GetAll_Call) RunAndReturn(run func(context.Context) ([]*User, error)) *MockUsecase_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetOneById provides a mock function with given fields: ctx, userId
func (_m *MockUsecase) GetOneById(ctx context.Context, userId int64) (*User, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetOneById")
	}

	var r0 *User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*User, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *User); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsecase_GetOneById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOneById'
type MockUsecase_GetOneById_Call struct {
	*mock.Call
}

// GetOneById is a helper method to define mock.On call
//   - ctx context.Context
//   - userId int64
func (_e *MockUsecase_Expecter) GetOneById(ctx interface{}, userId interface{}) *MockUsecase_GetOneById_Call {
	return &MockUsecase_GetOneById_Call{Call: _e.mock.On("GetOneById", ctx, userId)}
}

func (_c *MockUsecase_GetOneById_Call) Run(run func(ctx context.Context, userId int64)) *MockUsecase_GetOneById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockUsecase_GetOneById_Call) Return(_a0 *User, _a1 error) *MockUsecase_GetOneById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsecase_GetOneById_Call) RunAndReturn(run func(context.Context, int64) (*User, error)) *MockUsecase_GetOneById_Call {
	_c.Call.Return(run)
	return _c
}

// InsertMany provides a mock function with given fields: ctx, users
func (_m *MockUsecase) InsertMany(ctx context.Context, users []User) error {
	ret := _m.Called(ctx, users)

	if len(ret) == 0 {
		panic("no return value specified for InsertMany")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []User) error); ok {
		r0 = rf(ctx, users)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUsecase_InsertMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertMany'
type MockUsecase_InsertMany_Call struct {
	*mock.Call
}

// InsertMany is a helper method to define mock.On call
//   - ctx context.Context
//   - users []User
func (_e *MockUsecase_Expecter) InsertMany(ctx interface{}, users interface{}) *MockUsecase_InsertMany_Call {
	return &MockUsecase_InsertMany_Call{Call: _e.mock.On("InsertMany", ctx, users)}
}

func (_c *MockUsecase_InsertMany_Call) Run(run func(ctx context.Context, users []User)) *MockUsecase_InsertMany_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]User))
	})
	return _c
}

func (_c *MockUsecase_InsertMany_Call) Return(_a0 error) *MockUsecase_InsertMany_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUsecase_InsertMany_Call) RunAndReturn(run func(context.Context, []User) error) *MockUsecase_InsertMany_Call {
	_c.Call.Return(run)
	return _c
}

// InsertOne provides a mock function with given fields: ctx, user
func (_m *MockUsecase) InsertOne(ctx context.Context, user User) (*User, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for InsertOne")
	}

	var r0 *User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, User) (*User, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, User) *User); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsecase_InsertOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertOne'
type MockUsecase_InsertOne_Call struct {
	*mock.Call
}

// InsertOne is a helper method to define mock.On call
//   - ctx context.Context
//   - user User
func (_e *MockUsecase_Expecter) InsertOne(ctx interface{}, user interface{}) *MockUsecase_InsertOne_Call {
	return &MockUsecase_InsertOne_Call{Call: _e.mock.On("InsertOne", ctx, user)}
}

func (_c *MockUsecase_InsertOne_Call) Run(run func(ctx context.Context, user User)) *MockUsecase_InsertOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(User))
	})
	return _c
}

func (_c *MockUsecase_InsertOne_Call) Return(_a0 *User, _a1 error) *MockUsecase_InsertOne_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsecase_InsertOne_Call) RunAndReturn(run func(context.Context, User) (*User, error)) *MockUsecase_InsertOne_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOneById provides a mock function with given fields: ctx, userId, user
func (_m *MockUsecase) UpdateOneById(ctx context.Context, userId int64, user User) error {
	ret := _m.Called(ctx, userId, user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOneById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, User) error); ok {
		r0 = rf(ctx, userId, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUsecase_UpdateOneById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOneById'
type MockUsecase_UpdateOneById_Call struct {
	*mock.Call
}

// UpdateOneById is a helper method to define mock.On call
//   - ctx context.Context
//   - userId int64
//   - user User
func (_e *MockUsecase_Expecter) UpdateOneById(ctx interface{}, userId interface{}, user interface{}) *MockUsecase_UpdateOneById_Call {
	return &MockUsecase_UpdateOneById_Call{Call: _e.mock.On("UpdateOneById", ctx, userId, user)}
}

func (_c *MockUsecase_UpdateOneById_Call) Run(run func(ctx context.Context, userId int64, user User)) *MockUsecase_UpdateOneById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(User))
	})
	return _c
}

func (_c *MockUsecase_UpdateOneById_Call) Return(_a0 error) *MockUsecase_UpdateOneById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUsecase_UpdateOneById_Call) RunAndReturn(run func(context.Context, int64, User) error) *MockUsecase_UpdateOneById_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUsecase creates a new instance of MockUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUsecase {
	mock := &MockUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
